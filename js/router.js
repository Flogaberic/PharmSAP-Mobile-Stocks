const Router = {
  routes: {},

  init() {
    console.log("âœ… Router initialisÃ©");

    // Charger home.html uniquement si l'user est connectÃ©
    let user = Router.isUserLoggedIn();
    let firstPage = user ? "pages/home.html" : "pages/login.html";

    $.mobile
      .loadPage(firstPage, {
        reload: false,
      })
      .then(() => {
        $.mobile.changePage(firstPage);
      });

    $(document).on("pagecontainerchange", function (event, ui) {
      const pageId = $(".ui-page-active").attr("id");
      console.log(`ğŸ”¹ Changement de page dÃ©tectÃ© : ${pageId}`);

      // VÃ©rifier l'accÃ¨s avant d'autoriser le changement de page
      Router.middleware(pageId);

      // ExÃ©cuter la fonction associÃ©e Ã  la page si elle existe
      if (Router.routes[pageId]) {
        Router.routes[pageId]();
      }
    });
  },

  /**
   * Enregistre la fonction associÃ©e Ã  la page
   * app.js
   * Router.register('home', homePageInit);
   */
  register(page, handler) {
    Router.routes[page] = handler;
  },

  /**
   * VÃ©rifie si l'utilisateur est connectÃ©
   */
  isUserLoggedIn() {
    // return localStorage.getItem("userLoggedIn") === "true";
    return true;
  },

  /**
   * Middleware : VÃ©rifie si l'utilisateur peut accÃ©der Ã  une page
   */
  middleware(pageId) {
    let user = Router.isUserLoggedIn();

    if (pageId === "login") {
      return; // Ne pas rediriger si on est sur la page de connexion
    }

    if (!user) {
      $.mobile.changePage("pages/login.html");
    }
  },
};

// âœ… Initialisation au chargement du DOM
$(document).ready(() => {
  Router.init();
});
